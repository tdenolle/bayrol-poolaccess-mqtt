name: Python Application CI

env:
  PYTHON_VERSION: '3.12'
  DOCKER_PLATFORMS: 'linux/arm/v6,linux/arm/v7,linux/arm64/v8,linux/amd64'
  DOCKER_HUB_REPOSITORY: 'tdenolle/bayrol-poolaccess-mqtt'
  COVERAGE_THRESHOLD: '95'


on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: write   # This is required to create/push the new git tag

jobs:
  build:
    name: Build, test and lint
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 ./app --count --config=setup.cfg --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 ./app --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with unittest
      run: |
        python -m unittest discover -s ./tests  -p 'test_*.py'

  coverage:
    name: Check coverage
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pytest-cov coverage[toml]
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run coverage
        run: |
           pytest --cov=app

      - name: Combine coverage and fail it itâ€™s under ${{ env.COVERAGE_THRESHOLD }}%
        run: |
          python -m coverage html --skip-covered --skip-empty
          
          # Report and write to summary.
          python -m coverage report | sed 's/^/    /' >> $GITHUB_STEP_SUMMARY
          
          # Report again and fail if under threshold.
          python -Im coverage report --fail-under=${{ env.COVERAGE_THRESHOLD }}

      - name: Upload HTML report if check failed
        uses: actions/upload-artifact@v4
        with:
          name: html-report
          path: htmlcov
        if: ${{ failure() }}

  tag:
    name: Generate Tag
    needs:
      - build
      - coverage
    if: github.event_name != 'pull_request'
    outputs:
      tag_name: ${{ steps.tag_name.outputs.value }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Read version from toml
        uses: SebRollen/toml-action@v1.2.0
        id: toml_version
        with:
          file: '${{ github.workspace }}/pyproject.toml'
          field: 'project.version'

      - name: Generate tag name
        id: tag_name
        run: echo "value=${{ steps.toml_version.outputs.value }}-dev.$(date +'%Y%m%d%H%M%S')" >> "$GITHUB_OUTPUT"

      - name: Create tag
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{ steps.tag_name.outputs.value }}',
              sha: context.sha
            })

  push_to_registry:
    name: Push docker image to hub
    needs:
      - tag
    runs-on: ubuntu-latest
    steps:
      - name: check repository
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: login to docker registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: build and push docker image to registry
        uses: docker/build-push-action@v6
        with:
          push: true
          platforms: ${{ env.DOCKER_PLATFORMS }}
          build-args: |
            BUILD_FROM=python:${{ env.PYTHON_VERSION }}-alpine
            DOCKER_TAG=${{ needs.tag.outputs.tag_name }}
          tags: "${{ env.DOCKER_HUB_REPOSITORY }}:dev,${{ env.DOCKER_HUB_REPOSITORY }}:${{ needs.tag.outputs.tag_name }}"

  update_hassio_addon:
    name: Update Hassio Addons Project Latest Tag
    needs:
      - tag
      - push_to_registry
    runs-on: ubuntu-latest
    steps:
      - name: Trigger hassio-addons version update Workflow
        run: |
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.HASSIO_ADDONS_PAT }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/tdenolle/hassio-addons/actions/workflows/update-addon-version.yml/dispatches \
           -d '{"ref":"master","inputs":{ "slug": "bayrol-poolaccess-mqtt-dev", "version": "${{ needs.tag.outputs.tag_name }}" }}'


